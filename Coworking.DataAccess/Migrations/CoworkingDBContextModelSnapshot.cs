// <auto-generated />
using System;
using Coworking.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Coworking.DataAccess.Migrations
{
    [DbContext(typeof(CoworkingDBContext))]
    partial class CoworkingDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Coworking.DataContracts.Entities.AdminEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.BookingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookingDate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("OfficeId");

                    b.Property<bool>("RentWorkSpace");

                    b.Property<int?>("RoomId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.OfficeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("AdminId");

                    b.Property<string>("City");

                    b.Property<bool>("HasIndividualWorkSpace");

                    b.Property<int>("IdAdmin");

                    b.Property<string>("Name");

                    b.Property<int>("NumberWorkSpaces");

                    b.Property<string>("Phone");

                    b.Property<float>("PriceWorkSpaceDaily");

                    b.Property<float>("PriceWorkSpaceMonthly");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.Offices2RoomsEntity", b =>
                {
                    b.Property<int>("OfficeId");

                    b.Property<int>("RoomId");

                    b.HasKey("OfficeId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("Office2Room");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.Room2ServicesEntity", b =>
                {
                    b.Property<int>("IdRoom");

                    b.Property<int>("IdService");

                    b.HasKey("IdRoom", "IdService");

                    b.HasIndex("IdService");

                    b.ToTable("Room2Services");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.RoomEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.BookingEntity", b =>
                {
                    b.HasOne("Coworking.DataContracts.Entities.OfficeEntity", "Office")
                        .WithOne("Booking")
                        .HasForeignKey("Coworking.DataContracts.Entities.BookingEntity", "OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Coworking.DataContracts.Entities.UserEntity", "User")
                        .WithOne("Booking")
                        .HasForeignKey("Coworking.DataContracts.Entities.BookingEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.OfficeEntity", b =>
                {
                    b.HasOne("Coworking.DataContracts.Entities.AdminEntity", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.Offices2RoomsEntity", b =>
                {
                    b.HasOne("Coworking.DataContracts.Entities.OfficeEntity", "Office")
                        .WithMany("Office2Room")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Coworking.DataContracts.Entities.RoomEntity", "Room")
                        .WithMany("Office2Room")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Coworking.DataContracts.Entities.Room2ServicesEntity", b =>
                {
                    b.HasOne("Coworking.DataContracts.Entities.RoomEntity", "Room")
                        .WithMany("Room2Service")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Coworking.DataContracts.Entities.ServiceEntity", "Service")
                        .WithMany("Room2Service")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
